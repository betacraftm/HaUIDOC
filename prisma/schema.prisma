generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Comment {
  id          String    @id @default(uuid())
  user_id     String?
  document_id String?
  content     String?   @db.Text
  created_at  DateTime? @db.DateTime(0) @default(now())
  users       User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_ibfk_1")
  documents   Document? @relation(fields: [document_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comments_ibfk_2")

  @@index([document_id], map: "document_id")
  @@index([user_id], map: "user_id")
  @@map("comments")
}

model Document {
  id          String      @id @default(uuid())
  title       String      @db.VarChar(255)
  desc        String?     @db.Text
  file_url    String?     @db.Text
  subject_id  String?
  uploaded_by String?
  created_at  DateTime?   @db.DateTime(0) @default(now())
  comments    Comment[]
  subjects    Subject?    @relation(fields: [subject_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "documents_ibfk_1")
  users       User?       @relation(fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "documents_ibfk_2")

  liked_by    UserLikedDocument[]
  viewed_by   UserViewedDocument[]

  @@index([subject_id], map: "subject_id")
  @@index([uploaded_by], map: "uploaded_by")
  @@index([title])
  @@map("documents")
}

model Major {
  id    String @id @default(uuid())
  name  String @db.VarChar(255)
  users User[]

  @@index([name])
  @@map("majors")
}

model Subject {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(255)
  documents Document[]

  @@index([name])
  @@map("subjects")
}

enum UserRole {
  client
  admin
}

model User {
  id               String               @id @default(uuid())
  name             String               @db.VarChar(255)
  username         String               @db.VarChar(255) @unique
  password_hash    String?              @db.VarChar(255)
  role             UserRole?            @default(client)
  created_at       DateTime?            @db.DateTime(0) @default(now())
  image_url        String?              @db.VarChar(255)
  major_id         String?
  comments         Comment[]
  documents        Document[]
  majors           Major?               @relation(fields: [major_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")

  liked_documents  UserLikedDocument[]

  viewed_documents UserViewedDocument[]

  @@index([major_id], map: "major_id")
  @@index([username])
  @@index([role])
  @@map("users")
}

model UserLikedDocument {
  user_id     String
  document_id String

  user      User     @relation(fields: [user_id], references: [id])
  document  Document @relation(fields: [document_id], references: [id])

  @@id([user_id, document_id])
  @@index([user_id])
  @@index([document_id])
  @@map("UserLikedDocument")
}

model UserViewedDocument {
  user_id     String
  document_id String
  viewed_at   DateTime @db.DateTime(0) @default(now())

  user      User     @relation(fields: [user_id], references: [id])
  document  Document @relation(fields: [document_id], references: [id])

  @@id([user_id, document_id])
  @@index([user_id])
  @@index([document_id])
  @@map("UserViewedDocument")
}